import { MetricCard } from '@/components/admin/MetricCard';
import { useAdminStats, useRecentUsers } from '@/hooks/useAdminStats';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  LineChart, 
  Line, 
  ResponsiveContainer, 
  Tooltip
} from 'recharts';
import { Link } from 'react-router-dom';
import { ArrowRight, Activity } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';

export default function Dashboard() {
  const { data: stats, isLoading: statsLoading, refetch } = useAdminStats();
  const { data: recentUsers, isLoading: usersLoading } = useRecentUsers();

  if (statsLoading) {
    return <DashboardSkeleton />;
  }

  return (
    <div className="p-6 space-y-6 bg-[#0A0A0A] min-h-screen">
      {/* Page Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white mb-1">Dashboard</h1>
          <p className="text-gray-400">Platform overview and key metrics</p>
        </div>
        <Button 
          variant="outline" 
          className="border-[#2A2A2A] text-white hover:bg-[#1A1A1A]"
          onClick={() => refetch()}
        >
          Refresh Data
        </Button>
      </div>

      {/* Metrics Grid - Row 1 */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* Total Users */}
        <MetricCard
          title="Total Users"
          value={stats?.totalUsers || 0}
          change={stats?.recentSignups && stats?.totalUsers ? Math.round((stats.recentSignups / stats.totalUsers) * 100) : 0}
          chart={
            <ResponsiveContainer width="100%" height={60}>
              <LineChart data={stats?.signupTrend || []}>
                <Line 
                  type="monotone" 
                  dataKey="count" 
                  stroke="#0EA5E9" 
                  strokeWidth={2}
                  dot={false}
                />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#1A1A1A', 
                    border: '1px solid #2A2A2A',
                    borderRadius: '8px',
                    color: '#fff'
                  }}
                />
              </LineChart>
            </ResponsiveContainer>
          }
          footer={
            <Link to="/admin/users" className="text-xs text-blue-400 hover:text-blue-300 flex items-center gap-1">
              View all users <ArrowRight size={12} />
            </Link>
          }
        />

        {/* Active Traders */}
        <MetricCard
          title="Active Traders"
          value={stats?.activeTraders || 0}
          footer={
            <p className="text-xs text-gray-500">
              {stats?.totalUsers ? Math.round((stats.activeTraders / stats.totalUsers) * 100) : 0}% of total users
            </p>
          }
        />

        {/* Capital Deployed */}
        <MetricCard
          title="Capital Deployed"
          value={`$${(stats?.totalCapital || 0).toLocaleString()}`}
          footer={
            <p className="text-xs text-gray-500">
              Across {stats?.activeTraders || 0} active traders
            </p>
          }
        />

        {/* Active Signals */}
        <MetricCard
          title="Active Signals"
          value={stats?.activeSignals || 0}
          footer={
            <p className="text-xs text-gray-500">
              Generated by TubeAmp v1
            </p>
          }
        />
      </div>

      {/* Row 2: Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        {/* Recent Signups - Takes 2 columns */}
        <Card className="bg-[#1A1A1A] border-[#2A2A2A] p-6 lg:col-span-2 rounded-2xl">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-white">Recent Signups</h3>
            <Link to="/admin/users">
              <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                View all <ArrowRight size={14} className="ml-1" />
              </Button>
            </Link>
          </div>

          {usersLoading ? (
            <div className="space-y-3">
              {[1,2,3,4,5].map(i => (
                <Skeleton key={i} className="h-12 bg-[#0A0A0A]" />
              ))}
            </div>
          ) : (
            <div className="space-y-2">
              {recentUsers?.map((user) => (
                <div
                  key={user.id}
                  className="flex items-center justify-between p-3 rounded-lg hover:bg-[#0A0A0A] transition-colors group"
                >
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-semibold">
                      {user.email?.[0].toUpperCase()}
                    </div>
                    <div>
                      <p className="text-sm font-medium text-white group-hover:text-blue-400 transition-colors">
                        {user.full_name || user.email}
                      </p>
                      <p className="text-xs text-gray-500">{user.email}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-xs text-gray-500">
                      {new Date(user.created_at).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              ))}

              {recentUsers?.length === 0 && (
                <p className="text-center text-gray-500 py-8">No users yet</p>
              )}
            </div>
          )}
        </Card>

        {/* Platform Health - Takes 1 column */}
        <Card className="bg-[#1A1A1A] border-[#2A2A2A] p-6 rounded-2xl">
          <h3 className="text-lg font-semibold text-white mb-4">Platform Health</h3>
          
          <div className="space-y-4">
            <HealthMetric 
              label="API Status" 
              status="operational" 
              icon={Activity}
            />
            <HealthMetric 
              label="Database" 
              status="operational" 
              icon={Activity}
            />
            <HealthMetric 
              label="Trading Engine" 
              status="operational" 
              icon={Activity}
            />
            <HealthMetric 
              label="Broker Connection" 
              status="operational" 
              icon={Activity}
            />
          </div>

          <div className="mt-4 pt-4 border-t border-[#2A2A2A]">
            <p className="text-xs text-gray-500">Last checked: Just now</p>
          </div>
        </Card>
      </div>
    </div>
  );
}

function HealthMetric({ 
  label, 
  status, 
  icon: Icon 
}: { 
  label: string; 
  status: 'operational' | 'degraded' | 'down';
  icon: any;
}) {
  const statusColors = {
    operational: 'text-green-500',
    degraded: 'text-yellow-500',
    down: 'text-red-500'
  };

  const statusDots = {
    operational: 'bg-green-500',
    degraded: 'bg-yellow-500',
    down: 'bg-red-500'
  };

  return (
    <div className="flex items-center justify-between">
      <div className="flex items-center gap-2">
        <Icon size={16} className="text-gray-400" />
        <span className="text-sm text-gray-300">{label}</span>
      </div>
      <div className="flex items-center gap-2">
        <div className={`w-2 h-2 rounded-full ${statusDots[status]}`} />
        <span className={`text-xs font-medium capitalize ${statusColors[status]}`}>
          {status}
        </span>
      </div>
    </div>
  );
}

function DashboardSkeleton() {
  return (
    <div className="p-6 space-y-6 bg-[#0A0A0A] min-h-screen">
      <div className="space-y-2">
        <Skeleton className="h-10 w-64 bg-[#1A1A1A]" />
        <Skeleton className="h-5 w-96 bg-[#1A1A1A]" />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {[1,2,3,4].map(i => (
          <Skeleton key={i} className="h-48 bg-[#1A1A1A] rounded-2xl" />
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <Skeleton className="h-96 bg-[#1A1A1A] lg:col-span-2 rounded-2xl" />
        <Skeleton className="h-96 bg-[#1A1A1A] rounded-2xl" />
      </div>
    </div>
  );
}
